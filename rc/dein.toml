[[plugins]] # airline
repo = 'vim-airline/vim-airline'
hook_add = '''
let g:airline_powerline_fonts=1
let g:airline#extensions#tabline#enabled=1
'''

[[plugins]] # airline
repo = 'vim-airline/vim-airline-themes'
hook_add = '''
let g:airline_theme="badwolf"
'''

[[plugins]] 
repo = 'junegunn/vim-easy-align'
hook_add = '''
vmap <leader>a <Plug>(EasyAlign)
nmap <leader>a <Plug>(EasyAlign)
if !exists('g:easy_align_delimiters')
	  let g:easy_align_delimiters = {}
endif
let g:easy_align_delimiters['#'] = {'pattern': '#', 'ignore_groups': ['String']}
'''

[[plugins]]
repo = 'junegunn/fzf.vim'
# install with package manager
hook_add = '''
noremap <silent><C-p> :FZF<CR>
noremap <silent><C-f> :Ag<CR>
command! -bang -nargs=* MRU call fzf#vim#history(fzf#vim#with_preview())
noremap <silent><leader>j :MRU<CR>
'''


[[plugins]]
repo = 'francoiscabrol/ranger.vim'

[[plugins]]
repo = 'skywind3000/asynctasks.vim'

[[plugins]]
repo = 'skywind3000/asyncrun.vim'
hook_add = '''
let g:asyncrun_open = 6
noremap <silent><space>cb :AsyncTask cmake-build<CR>
noremap <silent><space>cr :AsyncTask cmake-run<CR>
noremap <silent><space>ca :AsyncTask cmake-build-and-run<CR>
noremap <silent><space>cc :AsyncTask cmake-clean<CR>
noremap <silent><space>Fb :AsyncTask file-build<CR>
noremap <silent><space>Fr :AsyncTask file-run<CR>
noremap <silent><space>wb :AsyncTask west-build<CR>
noremap <silent><space>wr :AsyncTask west-rebuild<CR>
noremap <silent><space>wf :AsyncTask west-flash<CR>
noremap <silent><space>q :ccl<CR>
'''

[[plugins]]
repo = 'neoclide/coc.nvim'
merge = 0
rev = 'release'
hook_add = '''
let g:coc_global_extensions = [
	\'coc-css',
	\'coc-explorer',
	\'coc-flutter',
	\'coc-fzf-preview',
	\'coc-git',
	\'coc-gitignore',
	\'coc-go',
	\'coc-html',
	\'coc-highlight',
	\'coc-json',
	\'coc-lists',
	\'coc-pairs',
	\'coc-prettier',
	\'coc-python',
	\'coc-rls',
	\'coc-sourcekit',
	\'coc-snippets',
	\'coc-tailwindcss',
	\'coc-tasks',
	\'coc-translator',
	\'coc-tslint',
	\'coc-tsserver',
	\'coc-vimlsp',
	\'coc-yank',
	\'coc-yaml',
	\'coc-zi',
	\]
nnoremap <silent> <space>y :<C-u>CocList -A --normal yank<CR>
noremap <silent><space>a :<C-U><C-R>=printf("CocCommand explorer %s", expand('%:p:h'))<CR><CR>
" popup
nmap <leader>t <Plug>(coc-translator-p)
vmap <leader>t <Plug>(coc-translator-pv)
" echo
nmap <leader>e <Plug>(coc-translator-e)
nmap <leader>e <Plug>(coc-translator-ev)
" replace
nmap <leader>r <Pluh>(coc-translator-r)
nmap <leader>r <Plug>(coc-translator-rv)
"tasks
nmap <silent> <space>by :<C-u>CocList tasks<CR>
"format
vmap <leader>F  <Plug>(coc-format-selected)
nmap <leader>F  <Plug>(coc-format-selected)
"coc-ccls
set updatetime=100
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gr <Plug>(coc-references)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gw <Plug>(coc-diagnostic-next)
nmap <silent> gW <Plug>(coc-diagnostic-prev)
nmap <silent> ge <Plug>(coc-diagnostic-next-error)
nmap <silent> gE <Plug>(coc-diagnostic-prev-error)
nmap <silent> g[ <Plug>(coc-format)
nnoremap <silent> <leader>sd :call <SID>show_documentation()<CR>
let g:markdown_fenced_languages = ['vim', 'help']
"key for fzf
nmap <silent> <space>dc :<C-u>CocCommand fzf-preview.Ctags<CR>
nmap <silent> <space>dj :<C-u>CocCommand fzf-preview.Jumps<CR>
nmap <silent> <space>db :<C-u>CocCommand fzf-preview.buffers<CR>
nmap <silent> <space>dB :<C-u>CocCommand fzf-preview.AllBuffers<CR>
nmap <silent> <space>dgl :<C-u>CocCommand fzf-preview.GitLogs<CR>
nmap <silent> <space>dgf :<C-u>CocCommand fzf-preview.GitFiles<CR>
nmap <silent> <space>dgs :<C-u>CocCommand fzf-preview.GitStatus<CR>
nmap <silent> <space>dgt :<C-u>CocCommand fzf-preview.GitStashes<CR>
nmap <silent> <space>dga :<C-u>CocCommand fzf-preview.GitActions<CR>
nmap <silent> <space>dmu :<C-u>CocCommand fzf-preview.MruFiles<CR>
nmap <silent> <space>dmr :<C-u>CocCommand fzf-preview.MrwFiles<CR>
nmap <silent> <space>dmo :<C-u>CocCommand fzf-preview.OldFiles<CR>
nmap <silent> <space>dq :<C-u>CocCommand fzf-preview.QuickFix<CR>
nmap <silent> <space>df :<C-U><C-R>=printf("CocCommand fzf-preview.ProjectGrep %s", expand("<cword>"))<CR><CR>
'''

[[plugins]]
repo = 'Yggdroot/LeaderF'
build =  './install.sh'
hook_add = '''
let g:Lf_ShowRelativePath = 0
let g:Lf_HideHelp = 1
let g:Lf_PreviewResult = {'Function':0, 'Colorscheme':1}
let g:Lf_GtagsAutoGenerate = 1
let g:Lf_Gtagslabel = 'native-pygments'
let g:Lf_ReverseOrder = 0
noremap <silent><space>fi :Leaderf! file<CR>
noremap <silent><space>fu :Leaderf! function<CR>
noremap <silent><space>fm :Leaderf! mru --cwd<CR>
noremap <silent><space>fh :Leaderf! mru<CR>
noremap <silent><space>fr :<C-U><C-R>=printf("Leaderf! gtags -r %s --auto-jump", expand("<cword>"))<CR><CR>
noremap <silent><space>fd :<C-U><C-R>=printf("Leaderf! gtags -d %s --auto-jump", expand("<cword>"))<CR><CR>
noremap <silent><space>fp :<C-U><C-R>=printf("Leaderf! gtags --recall")<CR><CR>
noremap <silent><space>fs :<C-U><C-R>=printf("Leaderf! gtags -s %s --auto-jump", expand("<cword>"))<CR><CR>
noremap <silent><space>fg :<C-U><C-R>=printf("Leaderf! gtags -g %s --auto-jump", expand("<cword>"))<CR><CR>
noremap <silent><space>fo :<C-U><C-R>=printf("Leaderf! gtags --by-context --auto-jump")<CR><CR>
noremap <silent><space>ff :<C-U><C-R>=printf("Leaderf! rg  %s", expand("<cword>"))<CR><CR>
'''

[[plugins]] # colorscheme
repo = 'dracula/vim'
hook_add = '''
colorscheme dracula
'''

[[plugins]]
repo = 'cpiger/NeoDebug'

[[plugins]] # snippets
repo = 'sirver/ultisnips'
hook_add = '''
let g:UltiSnipsExpandTrigger = '<tab>'
let g:UltiSnipsJumpForwardTrigger = '<tab>'
let g:UltiSnipsJumpBackwardTrigger = '<s-tab>'
'''

[[plugins]] # snippets
repo = 'honza/vim-snippets'

[[plugins]] # () [] {} color
repo = 'luochen1990/rainbow'
hook_add = '''
let g:rainbow_active = 1
" fix conflict with cmake highlight
let g:rainbow_conf = {
   \'separately': {
       \'cmake': 0,
   \}
\}
'''

[[plugins]] #syntax
repo = 'sheerun/vim-polyglot'

[[plugins]] # startup
repo = 'mhinz/vim-startify'

[[plugins]]
repo = 'ryanoasis/vim-devicons'

[[plugins]]
repo = 'junegunn/vim-emoji'
hook_add = '''
set completefunc=emoji#complete
'''

[[plugins]]
repo = 'godlygeek/tabular'

[[plugins]]
depends = 'tabular'
repo = 'plasticboy/vim-markdown'
hook_add = '''
let g:vim_markdown_folding_style_pythonic = 1
let g:vim_markdown_folding_disabled = 1
'''

[[plugins]]
repo = 'rhysd/vim-clang-format'
hook_add = '''
runtime local_clang-format.vim
'''
[[plugins]]
repo = 'wsdjeg/dein-ui.vim'

[[plugins]]
repo = 'kdheepak/lazygit.nvim'
rev = 'nvim-v0.4.3'
hook_add = '''
nnoremap <silent> <leader>lg :LazyGit<CR>
'''

[[plugins]]
repo = 'dhruvasagar/vim-zoom'
hook_add = '''
nmap <space>m <Plug>(zoom-toggle)
'''

[[plugins]]
repo = 'puremourning/vimspector'
build = './install_gadget.py --enable-c --enable-python'

[[plugins]]
repo = 'voldikss/vim-floaterm'
hook_add = '''
let g:floaterm_width=0.7
let g:floaterm_keymap_toggle = '<space>tt'
let g:floaterm_keymap_next = '<space>tn'
let g:floaterm_keymap_prev = '<space>tm'
nmap <silent><space>tp : FloatermNew ipython3<CR>
nmap <silent><space>tr : FloatermNew ranger<CR>
nmap <silent><space>tf : FloatermNew fzf<CR>
nmap <silent><space>tl : FloatermNew lazygit<CR>
nmap <silent><space>tx : FloatermNew xonsh<CR>
function! s:runner_proc(opts)
  let curr_bufnr = floaterm#curr()
  if has_key(a:opts, 'silent') && a:opts.silent == 1
    FloatermHide!
  endif
  let cmd = 'cd ' . shellescape(getcwd())
  call floaterm#terminal#send(curr_bufnr, [cmd])
  call floaterm#terminal#send(curr_bufnr, [a:opts.cmd])
  stopinsert
  if &filetype == 'floaterm' && g:floaterm_autoinsert
    call floaterm#util#startinsert()
  endif
endfunction

let g:asyncrun_runner = get(g:, 'asyncrun_runner', {})
let g:asyncrun_runner.floaterm = function('s:runner_proc')
let g:asynctasks_term_pos="floaterm"
'''

[[plugins]]
repo = 'tpope/vim-commentary'

[[plugins]]
repo = 'tpope/vim-repeat'

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'tpope/vim-speeddating'

[[plugins]]
repo = 'itchyny/calendar.vim'

[[plugins]]
repo = 'liuchengxu/vista.vim'
hook_add = '''
let g:vista_icon_indent = ["╰─▸ ", "├─▸ "]
let g:vista_default_executive = 'ctags'
let g:vista_ctags_cmd = {
      \ 'haskell': 'hasktags -x -o - -c',
      \ }
let g:vista_fzf_preview = ['right:50%']
let g:vista#renderer#enable_icon = 1
let g:vista#renderer#icons = {
\   "function": "\uf794",
\   "variable": "\uf71b",
\  }
nmap <silent><space>tv : Vista!!<CR>
'''

[[plugins]]
repo = 'liuchengxu/vim-clap'
build=':Clap install-binary!'
hook_add = '''
let g:clap_theme = 'material_design_dark'
let height = &lines / 3
let width = float2nr(&columns - (&columns * 2 / 10))
let col = float2nr((&columns - width) / 2)
nmap <silent> zf : Clap files<CR>
nmap <silent> zb : Clap buffers<CR>
nmap <silent> zl : Clap blines<CR>
nmap <silent> zg : Clap git_diff_files<CR>
nmap <silent> zr : Clap grep<CR>
nmap <silent> zv : Clap grep ++query=<cword><CR>
vmap <silent> zv : Clap grep ++query=@visual<CR>
nmap <silent> zR : Clap grep2<CR>
nmap <silent> zc : Clap colors<CR>
nmap <silent> zy : Clap yanks<CR>
'''
