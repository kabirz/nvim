[[plugins]] # airline
repo = 'vim-airline/vim-airline'
hook_add = '''
let g:airline_powerline_fonts=1
let g:airline#extensions#tabline#enabled=1
'''

[[plugins]] # airline
repo = 'vim-airline/vim-airline-themes'
hook_add = '''
let g:airline_theme="badwolf"
'''

[[plugins]] 
repo = 'junegunn/vim-easy-align'
hook_add = '''
vmap <leader>a <Plug>(EasyAlign)
nmap <leader>a <Plug>(EasyAlign)
if !exists('g:easy_align_delimiters')
	  let g:easy_align_delimiters = {}
endif
let g:easy_align_delimiters['#'] = {'pattern': '#', 'ignore_groups': ['String']}
'''

[[plugins]]
repo = 'junegunn/fzf'
build = './install --all'
merged = '0'

[[plugins]]
repo = 'junegunn/fzf.vim'
# install with package manager
depends = 'fzf'
hook_add = '''
noremap <silent><C-p> :FZF<CR>
noremap <silent><C-f> :Ag<CR>
command! -bang -nargs=* MRU call fzf#vim#history(fzf#vim#with_preview())
noremap <silent><leader>j :MRU<CR>
'''


[[plugins]]
repo = 'francoiscabrol/ranger.vim'

[[plugins]]
repo = 'skywind3000/asynctasks.vim'

[[plugins]]
repo = 'skywind3000/asyncrun.vim'
hook_add = '''
let g:asyncrun_open = 6
noremap <silent><space>cb :AsyncTask cmake-build<CR>
noremap <silent><space>cr :AsyncTask cmake-run<CR>
noremap <silent><space>ca :AsyncTask cmake-build-and-run<CR>
noremap <silent><space>cc :AsyncTask cmake-clean<CR>
noremap <silent><space>Fb :AsyncTask file-build<CR>
noremap <silent><space>Fr :AsyncTask file-run<CR>
'''

[[plugins]]
repo = 'neoclide/coc.nvim'
merge = 0
rev = 'release'
hook_add = '''
let g:coc_global_extensions = [
	\'coc-css',
	\'coc-explorer',
	\'coc-flutter',
	\'coc-git',
	\'coc-gitignore',
	\'coc-go',
	\'coc-html',
	\'coc-highlight',
	\'coc-json',
	\'coc-lists',
	\'coc-pairs',
	\'coc-python',
	\'coc-rls',
	\'coc-sourcekit',
	\'coc-snippets',
	\'coc-tailwindcss',
	\'coc-tasks',
	\'coc-translator',
	\'coc-tslint',
	\'coc-tsserver',
	\'coc-vimlsp',
	\'coc-yank',
	\'coc-zi',
	\]
nnoremap <silent> <space>y :<C-u>CocList -A --normal yank<CR>
noremap <silent><space>a :<C-U><C-R>=printf("CocCommand explorer %s", expand('%:p:h'))<CR><CR>
" popup
nmap <leader>t <Plug>(coc-translator-p)
vmap <leader>t <Plug>(coc-translator-pv)
" echo
nmap <leader>e <Plug>(coc-translator-e)
nmap <leader>e <Plug>(coc-translator-ev)
" replace
nmap <leader>r <Pluh>(coc-translator-r)
nmap <leader>r <Plug>(coc-translator-rv)
"tasks
nmap <silent> <space>by :<C-u>CocList tasks<CR>
"format
vmap <leader>F  <Plug>(coc-format-selected)
nmap <leader>F  <Plug>(coc-format-selected)
"coc-ccls
set updatetime=100
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gr <Plug>(coc-references)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gw <Plug>(coc-diagnostic-next)
nmap <silent> gW <Plug>(coc-diagnostic-prev)
nmap <silent> ge <Plug>(coc-diagnostic-next-error)
nmap <silent> gE <Plug>(coc-diagnostic-prev-error)
nmap <silent> g[ <Plug>(coc-format)
nnoremap <silent> <leader>sd :call <SID>show_documentation()<CR>
let g:markdown_fenced_languages = ['vim', 'help']
'''

[[plugins]]
repo = 'Yggdroot/LeaderF'
build =  './install.sh'
hook_add = '''
let g:Lf_ShowRelativePath = 0
let g:Lf_HideHelp = 1
let g:Lf_PreviewResult = {'Function':0, 'Colorscheme':1}
let g:Lf_GtagsAutoGenerate = 1
let g:Lf_Gtagslabel = 'native-pygments'
let g:Lf_ReverseOrder = 0
noremap <silent><space>fi :Leaderf! file<CR>
noremap <silent><space>fu :Leaderf! function<CR>
noremap <silent><space>fm :Leaderf! mru --cwd<CR>
noremap <silent><space>fh :Leaderf! mru<CR>
noremap <silent><space>fr :<C-U><C-R>=printf("Leaderf! gtags -r %s --auto-jump", expand("<cword>"))<CR><CR>
noremap <silent><space>fd :<C-U><C-R>=printf("Leaderf! gtags -d %s --auto-jump", expand("<cword>"))<CR><CR>
noremap <silent><space>fp :<C-U><C-R>=printf("Leaderf! gtags --recall")<CR><CR>
noremap <silent><space>fs :<C-U><C-R>=printf("Leaderf! gtags -s %s --auto-jump", expand("<cword>"))<CR><CR>
noremap <silent><space>fg :<C-U><C-R>=printf("Leaderf! gtags -g %s --auto-jump", expand("<cword>"))<CR><CR>
noremap <silent><space>fo :<C-U><C-R>=printf("Leaderf! gtags --by-context --auto-jump")<CR><CR>
noremap <silent><space>ff :<C-U><C-R>=printf("Leaderf! rg  %s", expand("<cword>"))<CR><CR>
'''

[[plugins]] # colorscheme
repo = 'dracula/vim'
name = 'dracula'
hook_add = '''
colorscheme dracula
'''

[[plugins]]
repo = 'cpiger/NeoDebug'

[[plugins]] # snippets
repo = 'sirver/ultisnips'
hook_add = '''
let g:UltiSnipsExpandTrigger = '<tab>'
let g:UltiSnipsJumpForwardTrigger = '<tab>'
let g:UltiSnipsJumpBackwardTrigger = '<s-tab>'
'''

[[plugins]] # snippets
repo = 'honza/vim-snippets'

[[plugins]] # () [] {} color
repo = 'luochen1990/rainbow'
hook_add = '''
let g:rainbow_active = 1
'''

[[plugins]] #syntax
repo = 'sheerun/vim-polyglot'

[[plugins]] # startup
repo = 'mhinz/vim-startify'

[[plugins]]
repo = 'ryanoasis/vim-devicons'

[[plugins]]
repo = 'godlygeek/tabular'

[[plugins]]
depends = 'tabular'
repo = 'plasticboy/vim-markdown'
hook_add = '''
let g:vim_markdown_folding_style_pythonic = 1
let g:vim_markdown_folding_disabled = 1
'''

[[plugins]]
repo = 'rhysd/vim-clang-format'
hook_add = '''
runtime local_clang-format.vim
'''
[[plugins]]
repo = 'wsdjeg/dein-ui.vim'
