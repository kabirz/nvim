[[plugins]] # airline
repo = 'vim-airline/vim-airline'
hook_add = '''
let g:airline_powerline_fonts=1
let w:airline_disable_statusline = 1
let g:airline#extensions#tabline#enabled=1
'''

[[plugins]] # airline themes
repo = 'vim-airline/vim-airline-themes'
hook_add = '''
let g:airline_theme = 'badwolf'
'''

[[plugins]] # status bar
repo = 'hardcoreplayers/spaceline.vim'
hook_add = '''
let g:spaceline_seperate_style = 'arrow'
let g:spaceline_lsp_executive = 'coc'
'''

[[plugins]] 
repo = 'junegunn/vim-easy-align'
hook_add = '''
vmap <leader>a <Plug>(EasyAlign)
nmap <leader>a <Plug>(EasyAlign)
if !exists('g:easy_align_delimiters')
	  let g:easy_align_delimiters = {}
endif
let g:easy_align_delimiters['#'] = {'pattern': '#', 'ignore_groups': ['String']}
'''

[[plugins]]
repo = 'junegunn/fzf.vim'
# install with package manager
hook_add = '''
noremap <silent><C-p> :FZF<CR>
noremap <silent><C-f> :Ag<CR>
command! -bang -nargs=* MRU call fzf#vim#history(fzf#vim#with_preview())
'''

[[plugins]]
repo = 'francoiscabrol/ranger.vim'

[[plugins]]
repo = 'skywind3000/asynctasks.vim'

[[plugins]]
repo = 'skywind3000/asyncrun.vim'
hook_add = '''
let g:asyncrun_open = 6
'''

[[plugins]]
repo = 'neoclide/coc.nvim'
merge = 0
rev = 'release'
hook_add = '''
let g:coc_global_extensions = [
	\'coc-css',
	\'coc-explorer',
	\'coc-flutter',
	\'coc-fzf-preview',
	\'coc-git',
	\'coc-gitignore',
	\'coc-html',
	\'coc-highlight',
	\'coc-json',
	\'coc-lists',
	\'coc-pairs',
	\'coc-prettier',
	\'@yaegassy/coc-pylsp',
	\'coc-rust-analyzer',
	\'coc-sourcekit',
	\'coc-snippets',
	\'coc-tabnine',
	\'coc-tailwindcss',
	\'coc-tasks',
	\'coc-tslint',
	\'coc-tsserver',
	\'coc-vimlsp',
	\'coc-yank',
	\'coc-yaml',
	\'coc-zi',
	\]

inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Make <CR> auto-select the first completion item and notify coc.nvim to
" format on enter, <cr> could be remapped by other vim plugin
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

"coc-lsp
set updatetime=100
nmap <silent> gd <Plug>(coc-definition)
map <silent> <C-LeftMouse> <Plug>(coc-definition)
nmap <silent> gr <Plug>(coc-references)
map <silent> <C-RightMouse> <Plug>(coc-references)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gw <Plug>(coc-diagnostic-next)
nmap <silent> gW <Plug>(coc-diagnostic-prev)
nmap <silent> ge <Plug>(coc-diagnostic-next-error)
nmap <silent> gE <Plug>(coc-diagnostic-prev-error)
nmap <silent> g[ <Plug>(coc-format)
xmap <silent> g] <Plug>(coc-format-selected)
nmap <silent> g] <Plug>(coc-format-selected)
let g:markdown_fenced_languages = ['vim', 'help']
let g:coc_explorer_global_presets = {
\   '.vim': {
\     'root-uri': '~/.vim',
\   },
\   'tab': {
\     'position': 'tab',
\     'quit-on-open': v:true,
\   },
\   'floating': {
\     'position': 'floating',
\     'open-action-strategy': 'sourceWindow',
\   },
\   'floatingTop': {
\     'position': 'floating',
\     'floating-position': 'center-top',
\     'open-action-strategy': 'sourceWindow',
\   },
\   'floatingLeftside': {
\     'position': 'floating',
\     'floating-position': 'left-center',
\     'floating-width': 50,
\     'open-action-strategy': 'sourceWindow',
\   },
\   'floatingRightside': {
\     'position': 'floating',
\     'floating-position': 'right-center',
\     'floating-width': 50,
\     'open-action-strategy': 'sourceWindow',
\   },
\   'simplify': {
\     'file-child-template': '[selection | clip | 1] [indent][icon | 1] [filename omitCenter 1]'
\   }
\ }

'''

[[plugins]]
repo = 'Yggdroot/LeaderF'
build =  './install.sh'
hook_add = '''
let g:Lf_ShowRelativePath = 0
let g:Lf_HideHelp = 1
let g:Lf_PreviewResult = {'Function':0, 'Colorscheme':1}
let g:Lf_ReverseOrder = 0
'''

[[plugins]] # colorscheme
repo = 'dracula/vim'
hook_add = '''
let g:dracula_colorterm = 0
colorscheme dracula
hi! link Pmenu        DraculaGreen
hi! link PmenuSbar    DraculaBgDark
hi! link PmenuSel     DraculaYellow
'''

[[plugins]]
repo = 'cpiger/NeoDebug'

[[plugins]] # snippets
repo = 'sirver/ultisnips'
hook_add = '''
let g:UltiSnipsExpandTrigger = '<tab>'
let g:UltiSnipsJumpForwardTrigger = '<tab>'
let g:UltiSnipsJumpBackwardTrigger = '<s-tab>'
'''

[[plugins]] # snippets
repo = 'honza/vim-snippets'

[[plugins]] # () [] {} color
repo = 'luochen1990/rainbow'
hook_add = '''
let g:rainbow_active = 1
" fix conflict with cmake highlight
let g:rainbow_conf = {
   \'separately': {
       \'cmake': 0,
   \}
\}
'''

[[plugins]] #syntax
repo = 'sheerun/vim-polyglot'

[[plugins]] # startup
repo = 'mhinz/vim-startify'

[[plugins]]
repo = 'ryanoasis/vim-devicons'

[[plugins]]
repo = 'junegunn/vim-emoji'
hook_add = '''
set completefunc=emoji#complete
'''

[[plugins]]
repo = 'godlygeek/tabular'

[[plugins]]
depends = 'tabular'
repo = 'plasticboy/vim-markdown'
hook_add = '''
let g:vim_markdown_folding_style_pythonic = 1
let g:vim_markdown_folding_disabled = 1
'''

[[plugins]]
repo = 'wsdjeg/dein-ui.vim'

[[plugins]]
repo = 'kdheepak/lazygit.nvim'
rev = 'nvim-v0.4.3'

[[plugins]]
repo = 'dhruvasagar/vim-zoom'

[[plugins]]
repo = 'puremourning/vimspector'
build = './install_gadget.py --enable-c --enable-python'

[[plugins]]
repo = 'voldikss/vim-floaterm'
hook_add = '''
let g:floaterm_width=0.4
let g:floaterm_height=0.4
let g:floaterm_position="bottomright"
let g:floaterm_keymap_toggle = '<Space>tt'
let g:floaterm_keymap_next = '<Space>tn'
let g:floaterm_keymap_prev = '<Space>tm'
function! s:runner_proc(opts)
  let curr_bufnr = floaterm#curr()
  if has_key(a:opts, 'silent') && a:opts.silent == 1
    FloatermHide!
  endif
  let cmd = 'cd ' . shellescape(getcwd())
  call floaterm#terminal#send(curr_bufnr, [cmd])
  call floaterm#terminal#send(curr_bufnr, [a:opts.cmd])
  stopinsert
  if &filetype == 'floaterm' && g:floaterm_autoinsert
    call floaterm#util#startinsert()
  endif
endfunction

let g:asyncrun_runner = get(g:, 'asyncrun_runner', {})
let g:asyncrun_runner.floaterm = function('s:runner_proc')
let g:asynctasks_term_pos="floaterm"
'''

[[plugins]]
repo = 'tpope/vim-commentary'

[[plugins]]
repo = 'tpope/vim-repeat'

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'tpope/vim-speeddating'

[[plugins]]
repo = 'itchyny/calendar.vim'

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'liuchengxu/vista.vim'
hook_add = '''
let g:vista_echo_cursor_strategy = 'floating_win'
let g:vista_icon_indent = ["╰─▸ ", "├─▸ "]
let g:vista_default_executive = 'coc'
let g:vista_ctags_cmd = {
      \ 'haskell': 'hasktags -x -o - -c',
      \ }
let g:vista_fzf_preview = ['right:50%']
let g:vista#renderer#enable_icon = 1
let g:vista#renderer#icons = {
	\ 'func':           "\uf794",
	\ 'function':       "\uf794",
	\ 'functions':      "\uf794",
	\ 'var':            "\uf71b",
	\ 'variable':       "\uf71b",
	\ 'variables':      "\uf71b",
	\ 'const':          "\uf8ff",
	\ 'constant':       "\uf8ff",
	\ 'method':         "\uf6a6",
	\ 'package':        "\ue612",
	\ 'packages':       "\ue612",
	\ 'enum':           "\uf435",
	\ 'enumerator':     "\uf435",
	\ 'module':         "\uf668",
	\ 'modules':        "\uf668",
	\ 'type':           "\ue22b",
	\ 'typedef':        "\ue22b",
	\ 'types':          "\ue22b",
	\ 'field':          "\uf93d",
	\ 'fields':         "\uf93d",
	\ 'macro':          "\uf8a3",
	\ 'macros':         "\uf8a3",
	\ 'map':            "\ufb44",
	\ 'class':          "\uf9a9",
	\ 'augroup':        "\ufb44",
	\ 'struct':         "\ufb44",
	\ 'union':          "\ufacd",
	\ 'member':         "\uf02b",
	\ 'target':         "\uf893",
	\ 'property':       "\ufab6",
	\ 'interface':      "\ufa52",
	\ 'namespace':      "\uf475",
	\ 'subroutine':     "\uf915",
	\ 'implementation': "\uf87a",
	\ 'typeParameter':  "\uf278",
	\ 'default':        "\uf29c"
	\ }
'''

[[plugins]]
repo = 'liuchengxu/vim-clap'
build=':Clap install-binary!'
hook_add = '''
let g:clap_theme = 'material_design_dark'
let height = &lines / 3
let width = float2nr(&columns - (&columns * 2 / 10))
let col = float2nr((&columns - width) / 2)
'''

[[plugins]]
repo = 'APZelos/blamer.nvim'
if = 0
hook_add = '''
let g:blamer_enabled = 1
let g:blamer_delay = 50
'''

[[plugins]]
repo = 'kabirz/gn.nvim'
rtp = 'misc/vim'

[[plugins]]
repo = 'cespare/vim-toml'

[[plugins]]
repo = 'segeljakt/vim-silicon'
hook_add = '''
let g:silicon = {
	\ 'theme':              'Dracula',
	\ 'font':               'Source Code Pro',
	\ 'pad-horiz':          0,
	\ 'pad-vert':           0,
	\ 'shadow-blur-radius': 0,
	\ 'shadow-offset-x':    0,
	\ 'shadow-offset-y':    0,
	\ 'line-number':        v:true,
	\ 'round-corner':       v:false,
	\ 'window-controls':    v:true,
	\ 'output':             '~/images/silicon-{time:%Y-%m-%d-%H%M%S}.png',
	\ }
'''

[[plugins]]
repo = 'liuchengxu/vim-which-key'
hook_add = '''
nnoremap <silent> <Space>       :WhichKey '<Space>'<CR>
vnoremap <silent> <Space>       :WhichKeyVisual '<Space>'<CR>
nnoremap <silent> <Leader>      :WhichKey '<Leader>'<CR>
vnoremap <silent> <Leader>      :WhichKeyVisual '<Leader>'<CR>
nnoremap <silent> <LocalLeader> :WhichKey '<LocalLeader>'<CR>
vnoremap <silent> <LocalLeader> :WhichKeyVisual '<LocalLeader>'<CR>
let g:which_key_sep = '→'
set timeoutlen=500

noremap <silent><Space>a :<C-U><C-R>=printf("CocCommand explorer %s", expand('%:p:h'))<CR><CR>
noremap <silent><Space>ff : <C-U><C-R>=printf("Leaderf! rg  %s", expand("<cword>"))<CR><CR>
"space key
let g:space_map = {
	\'<Tab>': ['<C-o>', 'next postion'],
	\'a': 'file explorer',
	\'b': {'name': '+fzf-preview-option',
		\'c': [':CocCommand fzf-preview.Ctags', 'ctags'],
		\'j': [':CocCommand fzf-preview.Jumps', 'jumps'],
		\'b': [':CocCommand fzf-preview.Buffers', 'buffers'],
		\'B': [':CocCommand fzf-preview.AllBuffers', 'All buffers'],
		\'u': [':CocCommand fzf-preview.MruFiles', 'MruFiles'],
		\'w': [':CocCommand fzf-preview.MrwFiles', 'MrwFiles'],
		\'o': [':CocCommand fzf-preview.OldFiles', 'OldFiles'],
		\'q': [':CocCommand fzf-preview.QuickFix', 'QuickFix'],
		\'f': [':CocCommand fzf-preview.ProjectGrep '.expand('<cword>'), 'ProjectGrep'],
		\'y': [':CocList tasks', 'coc tasks'],
	      \},
	\'c': {'name': '+Config',
		\'c': [':CocConfig', 'coc config'],
		\'e': [':e $MYVIMRC', 'editor vim config'],
		\'g': [':e ~/.gitconfig', 'editor git config'],
		\'s': [':e ~/.ssh/config', 'editor ssh config'],
		\'u': [':source $MYVIMRC', 'update vim config'],
	      \},
	\'e': [':CocCommand explorer', 'project explorer'],
	\'f': {'name': '+Leaderf',
		\'i': [':Leaderf! file', 'leader file'],
		\'u': [':Leaderf! function', 'leader function'],
		\'m': [':Leaderf! mru --cwd', 'current project history'],
		\'h': [':Leaderf! mru', 'global history'],
		\'f': 'rg',
	      \},
	\'g': {'name': '+fzf-preview-git',
		\'l': [':CocCommand fzf-preview.GitLogs', 'git log'],
		\'f': [':CocCommand fzf-preview.GitFiles', 'git files'],
		\'s': [':CocCommand fzf-preview.GitStatus', 'git status'],
		\'t': [':CocCommand fzf-preview.GitStashes', 'git stashe'],
		\'a': [':CocCommand fzf-preview.GitActions', 'git action'],
	      \},
	\'h': ['<C-w>h', 'left windows'],
	\'l': ['<C-w>l', 'right windows'],
	\'j': ['<C-w>j', 'top windows'],
	\'k': ['<C-w>k', 'bottom windows'],
	\'m': ['<Plug>(zoom-toggle)', 'zoom toggle'],
	\'t': {'name': '+Floaterm',
		\'p': [':FloatermNew ipython3', 'ipython3'],
		\'r': [':FloatermNew ranger', 'ranger'],
		\'f': [':FloatermNew fzf', 'fzf'],
		\'l': [':FloatermNew lazygit', 'lazygit'],
		\'x': [':FloatermNew xonsh', 'xonsh'],
		\'t': 'toggle',
		\'n': 'next',
		\'m': 'prev',
	      \},
	\'s': [':Silicon', 'silicon code'],
	\'v': [':Vista!!', 'vista ctags'],
	\'y': [':CocList -A --normal yank', 'yank lists'],
	\'z': {'name': '+Clap',
		\'f': [':Clap files', 'files'],
		\'b': [':Clap buffers', 'buffers'],
		\'C': [':Clap bcommits', 'current commits'],
		\'c': [':Clap commits', 'commits'],
		\'l': [':Clap blines', 'lines'],
		\'g': [':Clap git_diff_files', 'git diff files'],
		\'h': [':Clap history', 'history'],
		\'j': [':Clap jumps', 'jumps'],
		\'r': [':Clap grep', 'grep'],
		\'a': [':Clap registers', 'registers'],
		\'m': [':Clap maps', 'maps'],
		\'v': [':Clap grep ++query=<cword>', 'find current word'],
		\'R': [':Clap grep2', 'grep2'],
		\'d': [':Clap command', 'command'],
		\'y': [':Clap yanks', 'yanks'],
		\'w': [':Clap windows', 'windows'],
		\':': [':Clap hist:', 'history command'],
		\'/': [':Clap hist/', 'history search'],
	      \},
\}
call which_key#register('<Space>', "g:space_map")

"leader key
let g:leader_map = {
	\'j': [':MRU', 'mru'],
	\'l': [':LazyGit', 'lazygit'],
	\'t': [':<Plug>(coc-translator-p)', 'coc translator pull'],
	\'e': [':<Plug>(coc-translator-e)', 'coc translator echo'],
	\'r': [':<Plug>(coc-translator-r)', 'coc translator replace'],
	\'F': [':<Plug>(coc-format-selected)', 'coc format'],
\}
call which_key#register('\', "g:leader_map")

"local leader key
let g:localleader_map = {
	\'c': {'name': '+AsyncTask-cmake',
		\'b': [':AsyncTask cmake-build', 'cmake build'],
		\'r': [':AsyncTask cmake-run', 'cmake run'],
		\'a': [':AsyncTask cmake-build-and-run', 'cmake build and run'],
		\'c': [':AsyncTask cmake-clean', 'cmake clean'],
		\'f': [':AsyncTask cargo-fb', 'cargo flash bin'],
		\'e': [':AsyncTask cargo-fe', 'cargo flash example'],
	      \},
	\'f': {'name': '+AsyncTask-file',
		\'b': [':AsyncTask file-build', 'file build'],
		\'r': [':AsyncTask file-run', 'file run'],
	      \},
	\'r': {'name': '+rust-analyzer',
		\'r': [':CocCommand rust-analyzer.run', 'run'],
		\'e': [':CocCommand rust-analyzer.expandMacro', 'expand macro'],
		\'l': [':CocCommand rust-analyzer.reload', 'reload'],
		\'a': [':CocCommand rust-analyzer.analyzerStatus', 'status'],
		\'u': [':CocCommand rust-analyzer.upgrade', 'upgrade'],
	      \},
	\'w': {'name': '+AsyncTask-west',
		\'b': [':AsyncTask west-build', 'west build'],
		\'r': [':AsyncTask west-rebuild', 'west rebuild'],
		\'f': [':AsyncTask west-flash', 'west flash'],
	      \},
	\'q': [':ccl', 'Close quickfix'],
\}
call which_key#register(';', "g:localleader_map")
'''
