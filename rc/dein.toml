[[plugins]] # airline
repo = 'vim-airline/vim-airline'
hook_add = '''
let g:airline_powerline_fonts=1
let w:airline_disable_statusline = 1
let g:airline#extensions#tabline#enabled=1
'''

[[plugins]] # airline themes
repo = 'vim-airline/vim-airline-themes'
hook_add = '''
let g:airline_theme = 'badwolf'
'''

[[plugins]] # status bar
repo = 'hardcoreplayers/spaceline.vim'
hook_add = '''
let g:spaceline_seperate_style = 'arrow'
let g:spaceline_lsp_executive = 'coc'
'''

[[plugins]] 
repo = 'junegunn/vim-easy-align'
hook_add = '''
vmap <leader>a <Plug>(EasyAlign)
nmap <leader>a <Plug>(EasyAlign)
if !exists('g:easy_align_delimiters')
	  let g:easy_align_delimiters = {}
endif
let g:easy_align_delimiters['#'] = {'pattern': '#', 'ignore_groups': ['String']}
'''

[[plugins]]
repo = 'junegunn/fzf.vim'
# install with package manager
hook_add = '''
noremap <silent><C-p> :FZF<CR>
noremap <silent><C-f> :Ag<CR>
command! -bang -nargs=* MRU call fzf#vim#history(fzf#vim#with_preview())
noremap <silent><leader>j :MRU<CR>
'''


[[plugins]]
repo = 'francoiscabrol/ranger.vim'

[[plugins]]
repo = 'skywind3000/asynctasks.vim'

[[plugins]]
repo = 'skywind3000/asyncrun.vim'
hook_add = '''
let g:asyncrun_open = 6
noremap <silent><LocalLeader>cb :AsyncTask cmake-build<CR>
noremap <silent><LocalLeader>cr :AsyncTask cmake-run<CR>
noremap <silent><LocalLeader>ca :AsyncTask cmake-build-and-run<CR>
noremap <silent><LocalLeader>cc :AsyncTask cmake-clean<CR>
noremap <silent><LocalLeader>fb :AsyncTask file-build<CR>
noremap <silent><LocalLeader>fr :AsyncTask file-run<CR>
noremap <silent><LocalLeader>wb :AsyncTask west-build<CR>
noremap <silent><LocalLeader>wr :AsyncTask west-rebuild<CR>
noremap <silent><LocalLeader>wf :AsyncTask west-flash<CR>
noremap <silent><LocalLeader>q :ccl<CR>
'''

[[plugins]]
repo = 'neoclide/coc.nvim'
merge = 0
rev = 'release'
hook_add = '''
let g:coc_global_extensions = [
	\'coc-css',
	\'coc-explorer',
	\'coc-flutter',
	\'coc-fzf-preview',
	\'coc-git',
	\'coc-gitignore',
	\'coc-go',
	\'coc-html',
	\'coc-highlight',
	\'coc-json',
	\'coc-lists',
	\'coc-pairs',
	\'coc-prettier',
	\'coc-python',
	\'coc-rust-analyzer',
	\'coc-sourcekit',
	\'coc-snippets',
	\'coc-tailwindcss',
	\'coc-tasks',
	\'coc-translator',
	\'coc-tslint',
	\'coc-tsserver',
	\'coc-vimlsp',
	\'coc-yank',
	\'coc-yaml',
	\'coc-zi',
	\]

inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Make <CR> auto-select the first completion item and notify coc.nvim to
" format on enter, <cr> could be remapped by other vim plugin
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

nnoremap <silent> <Space>y :<C-u>CocList -A --normal yank<CR>
noremap <silent><Space>a :<C-U><C-R>=printf("CocCommand explorer %s", expand('%:p:h'))<CR><CR>
" popup
nmap <leader>t <Plug>(coc-translator-p)
vmap <leader>t <Plug>(coc-translator-pv)
" echo
nmap <leader>e <Plug>(coc-translator-e)
nmap <leader>e <Plug>(coc-translator-ev)
" replace
nmap <leader>r <Pluh>(coc-translator-r)
nmap <leader>r <Plug>(coc-translator-rv)
"tasks
"nmap <silent> <Space>by :<C-u>CocList tasks<CR>
"format
vmap <leader>F  <Plug>(coc-format-selected)
nmap <leader>F  <Plug>(coc-format-selected)
"coc-ccls
set updatetime=100
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gr <Plug>(coc-references)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gw <Plug>(coc-diagnostic-next)
nmap <silent> gW <Plug>(coc-diagnostic-prev)
nmap <silent> ge <Plug>(coc-diagnostic-next-error)
nmap <silent> gE <Plug>(coc-diagnostic-prev-error)
nmap <silent> g[ <Plug>(coc-format)
nnoremap <silent> <leader>sd :call <SID>show_documentation()<CR>
let g:markdown_fenced_languages = ['vim', 'help']
"key for fzf
nmap <silent> <Space>bc :<C-u>CocCommand fzf-preview.Ctags<CR>
nmap <silent> <Space>bj :<C-u>CocCommand fzf-preview.Jumps<CR>
nmap <silent> <Space>bb :<C-u>CocCommand fzf-preview.Buffers<CR>
nmap <silent> <Space>bB :<C-u>CocCommand fzf-preview.AllBuffers<CR>
nmap <silent> <Space>gl :<C-u>CocCommand fzf-preview.GitLogs<CR>
nmap <silent> <Space>gf :<C-u>CocCommand fzf-preview.GitFiles<CR>
nmap <silent> <Space>gs :<C-u>CocCommand fzf-preview.GitStatus<CR>
nmap <silent> <Space>gt :<C-u>CocCommand fzf-preview.GitStashes<CR>
nmap <silent> <Space>ga :<C-u>CocCommand fzf-preview.GitActions<CR>
nmap <silent> <Space>bu :<C-u>CocCommand fzf-preview.MruFiles<CR>
nmap <silent> <Space>bw :<C-u>CocCommand fzf-preview.MrwFiles<CR>
nmap <silent> <Space>bo :<C-u>CocCommand fzf-preview.OldFiles<CR>
nmap <silent> <Space>bq :<C-u>CocCommand fzf-preview.QuickFix<CR>
nmap <silent> <Space>bf :<C-U><C-R>=printf("CocCommand fzf-preview.ProjectGrep %s", expand("<cword>"))<CR><CR>

" Rust analyzer bindings:
nnoremap <silent><LocalLeader>rr :<C-u>CocCommand rust-analyzer.run<CR>
nnoremap <silent><LocalLeader>re :<C-u>CocCommand rust-analyzer.expandMacro<CR>
nnoremap <silent><LocalLeader>rl :<C-u>CocCommand rust-analyzer.reload<CR>
nnoremap <silent><LocalLeader>ra :<C-u>CocCommand rust-analyzer.analyzerStatus<CR>
nnoremap <silent><LocalLeader>ru :<C-u>CocCommand rust-analyzer.upgrade<CR>
'''

[[plugins]]
repo = 'Yggdroot/LeaderF'
build =  './install.sh'
hook_add = '''
let g:Lf_ShowRelativePath = 0
let g:Lf_HideHelp = 1
let g:Lf_PreviewResult = {'Function':0, 'Colorscheme':1}
let g:Lf_GtagsAutoGenerate = 1
let g:Lf_Gtagslabel = 'native-pygments'
let g:Lf_ReverseOrder = 0
noremap <silent><Space>fi :Leaderf! file<CR>
noremap <silent><Space>fu :Leaderf! function<CR>
noremap <silent><Space>fm :Leaderf! mru --cwd<CR>
noremap <silent><Space>fh :Leaderf! mru<CR>
noremap <silent><Space>fr :<C-U><C-R>=printf("Leaderf! gtags -r %s --auto-jump", expand("<cword>"))<CR><CR>
noremap <silent><Space>fd :<C-U><C-R>=printf("Leaderf! gtags -d %s --auto-jump", expand("<cword>"))<CR><CR>
noremap <silent><Space>fp :<C-U><C-R>=printf("Leaderf! gtags --recall")<CR><CR>
noremap <silent><Space>fs :<C-U><C-R>=printf("Leaderf! gtags -s %s --auto-jump", expand("<cword>"))<CR><CR>
noremap <silent><Space>fg :<C-U><C-R>=printf("Leaderf! gtags -g %s --auto-jump", expand("<cword>"))<CR><CR>
noremap <silent><Space>fo :<C-U><C-R>=printf("Leaderf! gtags --by-context --auto-jump")<CR><CR>
noremap <silent><Space>ff :<C-U><C-R>=printf("Leaderf! rg  %s", expand("<cword>"))<CR><CR>
'''

[[plugins]] # colorscheme
repo = 'dracula/vim'
hook_add = '''
let g:dracula_colorterm = 0
colorscheme dracula
'''

[[plugins]]
repo = 'cpiger/NeoDebug'

[[plugins]] # snippets
repo = 'sirver/ultisnips'
hook_add = '''
let g:UltiSnipsExpandTrigger = '<tab>'
let g:UltiSnipsJumpForwardTrigger = '<tab>'
let g:UltiSnipsJumpBackwardTrigger = '<s-tab>'
'''

[[plugins]] # snippets
repo = 'honza/vim-snippets'

[[plugins]] # () [] {} color
repo = 'luochen1990/rainbow'
hook_add = '''
let g:rainbow_active = 1
" fix conflict with cmake highlight
let g:rainbow_conf = {
   \'separately': {
       \'cmake': 0,
   \}
\}
'''

[[plugins]] #syntax
repo = 'sheerun/vim-polyglot'

[[plugins]] # startup
repo = 'mhinz/vim-startify'

[[plugins]]
repo = 'ryanoasis/vim-devicons'

[[plugins]]
repo = 'junegunn/vim-emoji'
hook_add = '''
set completefunc=emoji#complete
'''

[[plugins]]
repo = 'godlygeek/tabular'

[[plugins]]
depends = 'tabular'
repo = 'plasticboy/vim-markdown'
hook_add = '''
let g:vim_markdown_folding_style_pythonic = 1
let g:vim_markdown_folding_disabled = 1
'''

[[plugins]]
repo = 'rhysd/vim-clang-format'
hook_add = '''
runtime local_clang-format.vim
'''
[[plugins]]
repo = 'wsdjeg/dein-ui.vim'

[[plugins]]
repo = 'kdheepak/lazygit.nvim'
rev = 'nvim-v0.4.3'
hook_add = '''
nnoremap <silent> <leader>lg :LazyGit<CR>
'''

[[plugins]]
repo = 'dhruvasagar/vim-zoom'
hook_add = '''
nmap <Space>m <Plug>(zoom-toggle)
'''

[[plugins]]
repo = 'puremourning/vimspector'
build = './install_gadget.py --enable-c --enable-python'

[[plugins]]
repo = 'voldikss/vim-floaterm'
hook_add = '''
let g:floaterm_width=0.4
let g:floaterm_height=0.4
let g:floaterm_position="bottomright"
let g:floaterm_keymap_toggle = '<Space>tt'
let g:floaterm_keymap_next = '<Space>tn'
let g:floaterm_keymap_prev = '<Space>tm'
nmap <silent><Space>tp : FloatermNew ipython3<CR>
nmap <silent><Space>tr : FloatermNew ranger<CR>
nmap <silent><Space>tf : FloatermNew fzf<CR>
nmap <silent><Space>tl : FloatermNew lazygit<CR>
nmap <silent><Space>tx : FloatermNew xonsh<CR>
function! s:runner_proc(opts)
  let curr_bufnr = floaterm#curr()
  if has_key(a:opts, 'silent') && a:opts.silent == 1
    FloatermHide!
  endif
  let cmd = 'cd ' . shellescape(getcwd())
  call floaterm#terminal#send(curr_bufnr, [cmd])
  call floaterm#terminal#send(curr_bufnr, [a:opts.cmd])
  stopinsert
  if &filetype == 'floaterm' && g:floaterm_autoinsert
    call floaterm#util#startinsert()
  endif
endfunction

let g:asyncrun_runner = get(g:, 'asyncrun_runner', {})
let g:asyncrun_runner.floaterm = function('s:runner_proc')
let g:asynctasks_term_pos="floaterm"
'''

[[plugins]]
repo = 'tpope/vim-commentary'

[[plugins]]
repo = 'tpope/vim-repeat'

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'tpope/vim-speeddating'

[[plugins]]
repo = 'itchyny/calendar.vim'

#[[plugins]]
#repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'liuchengxu/vista.vim'
hook_add = '''
let g:vista_echo_cursor_strategy = 'floating_win'
let g:vista_icon_indent = ["╰─▸ ", "├─▸ "]
let g:vista_default_executive = 'coc'
let g:vista_ctags_cmd = {
      \ 'haskell': 'hasktags -x -o - -c',
      \ }
let g:vista_fzf_preview = ['right:50%']
let g:vista#renderer#enable_icon = 1
let g:vista#renderer#icons = {
	\ 'func':           "\uf794",
	\ 'function':       "\uf794",
	\ 'functions':      "\uf794",
	\ 'var':            "\uf71b",
	\ 'variable':       "\uf71b",
	\ 'variables':      "\uf71b",
	\ 'const':          "\uf8ff",
	\ 'constant':       "\uf8ff",
	\ 'method':         "\uf6a6",
	\ 'package':        "\ue612",
	\ 'packages':       "\ue612",
	\ 'enum':           "\uf435",
	\ 'enumerator':     "\uf435",
	\ 'module':         "\uf668",
	\ 'modules':        "\uf668",
	\ 'type':           "\ue22b",
	\ 'typedef':        "\ue22b",
	\ 'types':          "\ue22b",
	\ 'field':          "\uf93d",
	\ 'fields':         "\uf93d",
	\ 'macro':          "\uf8a3",
	\ 'macros':         "\uf8a3",
	\ 'map':            "\ufb44",
	\ 'class':          "\uf9a9",
	\ 'augroup':        "\ufb44",
	\ 'struct':         "\ufb44",
	\ 'union':          "\ufacd",
	\ 'member':         "\uf02b",
	\ 'target':         "\uf893",
	\ 'property':       "\ufab6",
	\ 'interface':      "\ufa52",
	\ 'namespace':      "\uf475",
	\ 'subroutine':     "\uf915",
	\ 'implementation': "\uf87a",
	\ 'typeParameter':  "\uf278",
	\ 'default':        "\uf29c"
	\ }

nmap <silent><Space>tv : Vista!!<CR>
'''
repo = 'liuchengxu/vim-clap'
build=':Clap install-binary!'
hook_add = '''
let g:clap_theme = 'material_design_dark'
let height = &lines / 3
let width = float2nr(&columns - (&columns * 2 / 10))
let col = float2nr((&columns - width) / 2)
nmap <silent> <Space>zf : Clap files<CR>
nmap <silent> <Space>zb : Clap buffers<CR>
nmap <silent> <Space>zC : Clap bcommits<CR>
nmap <silent> <Space>zc : Clap commits<CR>
nmap <silent> <Space>zl : Clap blines<CR>
nmap <silent> <Space>zg : Clap git_diff_files<CR>
nmap <silent> <Space>zh : Clap history<CR>
nmap <silent> <Space>zj : Clap jumps<CR>
nmap <silent> <Space>zr : Clap grep<CR>
nmap <silent> <Space>za : Clap registers<CR>
nmap <silent> <Space>zm : Clap maps<CR>
nmap <silent> <Space>zv : Clap grep ++query=<cword><CR>
vmap <silent> <Space>zv : Clap grep ++query=@visual<CR>
nmap <silent> <Space>zR : Clap grep2<CR>
nmap <silent> <Space>zd : Clap command<CR>
nmap <silent> <Space>zy : Clap yanks<CR>
nmap <silent> <Space>zw : Clap windows<CR>
nmap <silent> <Space>z: : Clap hist:<CR>
nmap <silent> <Space>z/ : Clap hist/<CR>
'''

[[plugins]]
repo = 'APZelos/blamer.nvim'
if = 0
hook_add = '''
let g:blamer_enabled = 1
let g:blamer_delay = 50
'''

[[plugins]]
repo = 'kabirz/gn.nvim'
rtp = 'misc/vim'

[[plugins]]
repo = 'liuchengxu/vim-which-key'
hook_add = '''
nnoremap <silent> <Space>       :WhichKey '<Space>'<CR>
vnoremap <silent> <Space>       :WhichKeyVisual '<Space>'<CR>
nnoremap <silent> <Leader>      :WhichKey '<Leader>'<CR>
vnoremap <silent> <Leader>      :WhichKeyVisual '<Leader>'<CR>
nnoremap <silent> <LocalLeader> :WhichKey '<LocalLeader>'<CR>
vnoremap <silent> <LocalLeader> :WhichKeyVisual '<LocalLeader>'<CR>
let g:which_key_sep = '→'
set timeoutlen=500

"space key
let g:space_map = {}
let g:space_map.b = { 'name': '+fzf-preview-option'}
let g:space_map.g = { 'name': '+fzf-preview-git'}
let g:space_map.c = { 'name': '+Coc'}
let g:space_map.f = { 'name': '+Leaderf'}
let g:space_map.t = { 'name': '+Floaterm'}
let g:space_map.z = { 'name': '+Clap'}
call which_key#register('<Space>', "g:space_map")

"leader key
let g:leader_map = {}
let g:leader_map.l = {'name': 'lazygit'}
call which_key#register('\', "g:leader_map")

"local leader key
let g:localleader_map = {}
let g:localleader_map.c = {'name': '+AsyncTask-cmake'}
let g:localleader_map.f = {'name': '+AsyncTask-file'}
let g:localleader_map.r = {'name': '+rust-analyzer'}
let g:localleader_map.w = {'name': '+AsyncTask-west'}
call which_key#register(';', "g:localleader_map")
'''
