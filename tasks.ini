# vim: set fenc=utf-8 ft=dosini:

# define a new task named "file-build"
[file-build]

# shell command, use quotation for filenames containing spaces
# check ":AsyncTaskMacro" to see available macros
command:c=gcc "$(VIM_FILEPATH)" -o "$(VIM_FILEDIR)/$(VIM_FILENOEXT)"
command:cpp=g++ "$(VIM_FILEPATH)" -o "$(VIM_FILEDIR)/$(VIM_FILENOEXT)"

# working directory, can change to $(VIM_ROOT) for project root
cwd=$(VIM_FILEDIR)

# output mode, can be one of quickfix and terminal
# - quickfix: output to quickfix window
# - terminal: run the command in the internal terminal
output=quickfix

# this is for output=quickfix only
# if it is omitted, vim's current errorformat will be used.
errorformat=%f:%l:%m

# save file before execute
save=1

[file-run]
command="$(VIM_FILEDIR)/$(VIM_FILENOEXT)"
command:python=:CocCommand python.execInTerminal
command:c=$(VIM_FILEDIR)/$(VIM_FILENOEXT)
command:cpp=$(VIM_FILEDIR)/$(VIM_FILENOEXT)
cwd=$(VIM_FILEDIR)
output=terminal
save=1

[cmake-build]
command=cmake -H. -Bbuild -DCMAKE_EXPORT_COMPILE_COMMANDS=ON && cmake --build build
cwd=$(VIM_ROOT)
output=terminal
save=1

[cmake-run]
command=build/${VIM_PRONAME}
cwd=$(VIM_ROOT)
output=terminal

[cmake-build-and-run]
command=cmake -H. -Bbuild -DCMAKE_EXPORT_COMPILE_COMMANDS=ON && cmake --build build && build/${VIM_PRONAME}
cwd=$(VIM_ROOT)
output=terminal
save=1

[cmake-clean]
command=cmake -E remove_directory build
cwd=$(VIM_ROOT)
output=terminal

[cargo-fb]
command=cargo flash --bin $(VIM_FILENOEXT)
cwd=$(VIM_ROOT)
output=terminal

[cargo-fe]
command=cargo flash --example $(VIM_FILENOEXT)
cwd=$(VIM_ROOT)
output=terminal

